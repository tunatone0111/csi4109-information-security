Assignment 1 - Secure this house
(2019193015 박준하)


I. struct Lock의 Fields

  struct Lock 은 다음과 같이 구성되어 있습니다.

      owner_name: String
      keys: Vec<String>   // authorized keys
      inside: Vec<String> // array of user_name inside house
      state:
        user_name: String // 가장 마지막으로 일어난 INSERT KEY의 user_name
        key: String       // 가장 마지막으로 일어난 INSERT KEY의 key
        allowed: bool     // user의 enter house 가능 여부
      secret_key: String

  struct Lock에서 state 필드의 타입에 해당하는 struct State는 말 그대로 현재 
  Lock의 상태를 저장합니다.


II. struct Lock의 Methods

  1. INSERT KEY <user_name> <key>
    INSERT KEY <user_name> <key> 수행 시 다음과 같은 state를 저장합니다.

        state:
          user_name: <user_name>
          key: <key>
          allowed: false


  2. TURN KEY <user_name>
    TURN KEY <user_name> 수행 시 TURN KEY를 하고 있는 유저가 제일 마지막으로 
    INSERT KEY를 한 사람과 같은지 확인해보고, 마지막으로 INSERT KEY 했던 key가 
    authorized key list에 있다면 (혹은 secret_key와 일치하면) allowed 를 
    true로 변경하고 그렇지 않다면 false로 둡니다.

        state:
          user_name: <user_name>
          key: <key>
          allowed: true


  3. ENTER HOUSE <user_name>
    ENTER HOUSE <user_name> 수행 시 ENTER HOUSE를 하고 있는 유저가 현재 
    struct lock에 state에 저장되어있는 user_name과 일치하는지 확인하고 allowed가 
    true라면 inside 필드에 유저 이름을 추가하고 그렇지 않다면 ACCESS DENIED를 
    출력하고 아무 상태도 변경하지 않습니다.


  4. WHO'S INSIDE?
    inside 필드에 있는 user_name들을 순서대로 출력합니다. 아무도 없다면 
    NOBODY HOME을 출력합니다.


  5. CHANGE LOCKS <user_name> <key> ...
    user_name과 owner_name이 일치하고 inside 필드에 owner_name이 
    존재하면(즉, 집 안에 있는 상태라면) 인자로 받은 key 들을 새로 keys 필드에 
    저장합니다.


  6. LEAVE HOUSE
    inside 필드에 대해 iterator를 이용해서 존재하는지 확인하고 존재한다면 삭제합니다.


  7. run
    EOF 또는 empty string을 받았을 시 종료하는 loop를 돌며 input을 parse합니다. 
    string class의 starts_with method를 사용해서 case를 나누었습니다.
